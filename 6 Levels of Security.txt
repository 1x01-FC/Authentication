//////////////////////////////////// Level 1 - Username and Password Only ////////////////////////////////////

app.post('/register', (req, res) =>{
    //c)CreateDocuments
    const newUser = new User({
        email: req.body.username,
        password: req.body.password
    });

    newUser.save((err, result) => err ? 
        console.log(err) :
        res.render('secrets')
    );
})

app.post('/login', (req, res) => {
    const username = req.body.username;
    const password = req.body.password;

    User.findOne({email: username}, (err, i) => {
        if (err) {
            console.log(err);
        } else {
            if (i) {
                if (i.password === password) {
                    res.render('secrets');
                }
            }
        }
    });
});

//////////////////////////////////// Level 2 - Encryption ////////////////////////////////////

npm i mongoose-encryption
const encrypt = require("mongoose-encryption");

const secret = "<String>";
userSchema.plugin(encrypt, {secret: secret, encryptedFields: ["password"]});

//////////////////////////////////// Level 2.5 - Encryption with .env ////////////////////////////////////

npm i dotenv
require('dotenv').config();

touch .env
--> SECRET: <entersecret>

userSchema.plugin(encrypt, { secret: process.env.SECRET, encryptedFields: ["password"] });

//////////////////////////////////// Level 3 - Hashing md5 ////////////////////////////////////

npm i md5

const md5 = require("md5");

password: md5(req.body.password);

//////////////////////////////////// Level 3 - Salting + Hashing w/bcrypt ////////////////////////////////////

npm i bcrypt

const bcrypt = require("bcrypt");
const saltRounds = 10;

    
app.post('/register', (req, res) =>{
    
    bcrypt.hash(req.body.password, saltRounds, function (err, hash) {
        //c)CreateDocuments
        const newUser = new User({
            email: req.body.username,
            password: hash
        });

        newUser.save((err, result) => err ?
            console.log(err) :
            res.render('secrets')
        );
    });
   
})

app.post('/login', (req, res) => {
    const username = req.body.username;
    const password = req.body.password;

    User.findOne({email: username}, (err, i) => {
        if (err) {
            console.log(err);
        } else {
            if (i) {
                bcrypt.compare(password, i.password, (err, result) => {
                    res.render('secrets');
                });
            }
        }
    });
});